---
title: 'STAT 542 / CS 598: Homework 5'
author: "Fall 2019, by Ruoqing Zhu (rqzhu)"
date: 'Due: Monday, Oct 28 by 11:59 PM Pacific Time'
output:
  html_document:
    df_print: paged
    toc: yes
    toc_depth: '2'
  pdf_document:
    toc: yes
    toc_depth: 2
---

```{r setup, include=FALSE}
  knitr::opts_chunk$set(include = TRUE)  # TRUE for solution; FALSE for questions set

  knitr::opts_chunk$set(echo = TRUE)
  knitr::opts_chunk$set(message = FALSE)
  knitr::opts_chunk$set(warning = FALSE)
  knitr::opts_chunk$set(fig.height = 6, fig.width = 8, out.width = '50%', fig.align = "center")
  options(width = 90)
```

```{css, echo=FALSE}
.solution {
background-color: #e6ffe6;
}
```

## Directions

Students are encouraged to work together on homework. However, sharing, copying, or providing any part of a homework solution or code is an infraction of the University's rules on Academic Integrity. Any violation will be punished as severely as possible. Final submissions must be uploaded to your homework submission portal. No email or hardcopy will be accepted. For **late submission policy and grading rubrics**, please refer to the [course website](https://teazrq.github.io/stat542/homework.html).

- You are required to submit two files:
    - Your `.rmd` RMarkdown (or Python) file, which should be saved as `HW5_yourNetID.Rmd`. For example, `HW5_rqzhu.Rmd`.
    - The result of knitting your RMarkdown file as `HW5_yourNetID.pdf`. For example, `HW5_rqzhu.pdf`. Please note that this must be a `.pdf` file. `.html` format cannot be accepted.

- Your resulting `.pdf` file will be considered as a report, which is the material that will determine the majority of your grade. Be sure to visibly include all `R` code and output that is relevant to answering the exercises.
- If you use the example homework `.Rmd` file (provided [here](https://teazrq.github.io/stat542/homework.html)) as a template, be sure to remove the directions section.
- Your `.Rmd` file should be written such that, if it is placed in a folder with any data you are asked to import, it will knit properly without modification.
- Include your Name and NetID in your report.
- **Late policy**: You can also choose to submit your assignment as late as five days after the deadline, which is 11:59 PM on Saturday. However, **you will lose 10% of your score**.

## Question 1 [50 Points] K-Means Clustering

Let's consider coding a K-means algorithm. Perform the following: 

  * Load the `zip.train` (handwritten digit recognition) data from the ElemStatLearn package, and the goal is to identify clusters of digits based on only the pixels. 
  * [15 Points] Write your own code of k-means that iterates between two steps, and stop when the cluster membership does not change. 
    + updating the cluster means given the cluster membership
    + updating the cluster membership based on cluster means
  * [10 Points] Perform your algorithm with one random initialization with $k = 5$
    + For this question, compare your cluster membership to the true digits. What are the most prevalent digits in each of your clusters?
  * [10 Points] Perform your algorithm with 10 independent initiations with $k = 5$ and record the best
    + For this question, plot your clustering results on a two-dimensional plot, where the two axis are the first two principle components of your data
  * [15 Points] Compare the clustering results from the above two questions with the built-in `kmeans()` function in R. Use tables/figures to demonstrate your results and comment on your findings.

## Question 1 [50 Points] Two-dimensional Gaussian Mixture Model

We consider an example of the EM algorithm, which fits a Gaussian mixture model to the Old Faithful eruption data. For a demonstration of this problem, see the figure provided on [Wikipedia](https://en.wikipedia.org/wiki/Expectation%E2%80%93maximization_algorithm). As the end result, we will obtain the distribution parameters of the two underlying distributions. We consider the problem as follows. For this question, you are allowed to use packages that calculate the densities of normal distributions. 

* We use both variables `eruptions` and `waiting`. We assume that the underlying distributions given the unobserved latent variables are both two-dimensional normal: $N(\mu_1, \Sigma_1)$ and $N(\mu_2, \Sigma_2)$, respectively, while $\mu_1$, $\Sigma_1$, $\mu_2$, and $\Sigma_2$ are unknow parameters that we need to solve.
* We assume that the unobserved latent variables (that indicate the membership) follow i.i.d. Bernoulli distribution, with parameter $p$.
* Based on the logic of an EM algorithm, we will first initiate some values of the parameters in the normal distribution. I provided a choice of them, and the normal density plots based on the initial values.
* Your goal is to write the EM algorithm that progressively updates the parameters and the latent variable distribution parameter. Eventually, we will reach a stable model fitting result that approximate the two underlying distributions, as demonstrated on the Wikipedia page. Choose a reasonable stopping criterion. To demonstrate your results, you should provide at least the following information. 
  + The distribution parameters $p$, $\mu_1$, $\Sigma_1$, $\mu_2$, and $\Sigma_2$
  + A histogram of the underlying probabilities of the latent variables
  + Plot the normal densities at the 2nd, 3rd, 4th and the final iteration of your algorithm
* Now, experiment a very different initial value of the parameters and rerun the algorithm. Comment on the efficiency and convergence speed of this algorithm.  

```{r}
  # load the data
  faithful = read.table("..//data//faithful.txt")

  # the parameters
  mu1 = c(3, 80)
  mu2 = c(3.5, 60)
  Sigma1 = matrix(c(0.1, 0, 0, 10), 2, 2)
  Sigma2 = matrix(c(0.1, 0, 0, 50), 2, 2)
  
  # plot the current fit 
  library(mixtools)
  plot(faithful)
  
  addellipse <- function(mu, Sigma, ...)
  {
    ellipse(mu, Sigma, alpha = .05, lwd = 1, ...)
    ellipse(mu, Sigma, alpha = .25, lwd = 2, ...)
  }
    
  addellipse(mu1, Sigma1, col = "darkorange")
  addellipse(mu2, Sigma2, col = "deepskyblue")
```












